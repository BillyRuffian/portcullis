=begin
#Commons Votes API

#An API that allows querying of Commons Votes data.

The version of the OpenAPI document: v1
Contact: softwareengineering@parliament.uk
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module ParliamentCommonsVotes
  class DivisionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Return a Division
    # Single Division which has the specified Id
    # @param division_id [Integer] Id number of a Division whose records are to be returned
    # @param format [String] xml or json
    # @param [Hash] opts the optional parameters
    # @return [PublishedDivision]
    def divisions_get_division_by_id(division_id, format, opts = {})
      data, _status_code, _headers = divisions_get_division_by_id_with_http_info(division_id, format, opts)
      data
    end

    # Return a Division
    # Single Division which has the specified Id
    # @param division_id [Integer] Id number of a Division whose records are to be returned
    # @param format [String] xml or json
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublishedDivision, Integer, Hash)>] PublishedDivision data, response status code and response headers
    def divisions_get_division_by_id_with_http_info(division_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DivisionsApi.divisions_get_division_by_id ...'
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling DivisionsApi.divisions_get_division_by_id"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling DivisionsApi.divisions_get_division_by_id"
      end
      # resource path
      local_var_path = '/data/division/{divisionId}.{format}'.sub('{' + 'divisionId' + '}', CGI.escape(division_id.to_s)).sub('{' + 'format' + '}', CGI.escape(format.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PublishedDivision'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DivisionsApi.divisions_get_division_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DivisionsApi#divisions_get_division_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Divisions results grouped by party
    # Division results which meet the specified criteria grouped by parties
    # @param format [String] xml or json
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query_parameters_search_term Divisions containing search term within title or number
    # @option opts [Integer] :query_parameters_member_id Divisions returning Member with Member ID voting records
    # @option opts [Boolean] :query_parameters_include_when_member_was_teller Divisions where member was a teller as well as if they actually voted
    # @option opts [Time] :query_parameters_start_date Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
    # @option opts [Time] :query_parameters_end_date Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
    # @option opts [Integer] :query_parameters_division_number Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
    # @return [Array<DivisionGroupedByParty>]
    def divisions_get_divisions_groups_by_party(format, opts = {})
      data, _status_code, _headers = divisions_get_divisions_groups_by_party_with_http_info(format, opts)
      data
    end

    # Return Divisions results grouped by party
    # Division results which meet the specified criteria grouped by parties
    # @param format [String] xml or json
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query_parameters_search_term Divisions containing search term within title or number
    # @option opts [Integer] :query_parameters_member_id Divisions returning Member with Member ID voting records
    # @option opts [Boolean] :query_parameters_include_when_member_was_teller Divisions where member was a teller as well as if they actually voted
    # @option opts [Time] :query_parameters_start_date Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
    # @option opts [Time] :query_parameters_end_date Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
    # @option opts [Integer] :query_parameters_division_number Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
    # @return [Array<(Array<DivisionGroupedByParty>, Integer, Hash)>] Array<DivisionGroupedByParty> data, response status code and response headers
    def divisions_get_divisions_groups_by_party_with_http_info(format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DivisionsApi.divisions_get_divisions_groups_by_party ...'
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling DivisionsApi.divisions_get_divisions_groups_by_party"
      end
      # resource path
      local_var_path = '/data/divisions.{format}/groupedbyparty'.sub('{' + 'format' + '}', CGI.escape(format.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'queryParameters.searchTerm'] = opts[:'query_parameters_search_term'] if !opts[:'query_parameters_search_term'].nil?
      query_params[:'queryParameters.memberId'] = opts[:'query_parameters_member_id'] if !opts[:'query_parameters_member_id'].nil?
      query_params[:'queryParameters.includeWhenMemberWasTeller'] = opts[:'query_parameters_include_when_member_was_teller'] if !opts[:'query_parameters_include_when_member_was_teller'].nil?
      query_params[:'queryParameters.startDate'] = opts[:'query_parameters_start_date'] if !opts[:'query_parameters_start_date'].nil?
      query_params[:'queryParameters.endDate'] = opts[:'query_parameters_end_date'] if !opts[:'query_parameters_end_date'].nil?
      query_params[:'queryParameters.divisionNumber'] = opts[:'query_parameters_division_number'] if !opts[:'query_parameters_division_number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DivisionGroupedByParty>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DivisionsApi.divisions_get_divisions_groups_by_party",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DivisionsApi#divisions_get_divisions_groups_by_party\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return voting records for a Member
    # List of voting records for a member which meet the specified criteria.
    # @param format [String] xml or json
    # @param query_parameters_member_id [Integer] Id number of a Member whose voting records are to be returned
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :query_parameters_skip The number of records to skip. Default is 0
    # @option opts [Integer] :query_parameters_take The number of records to return per page. Default is 25
    # @option opts [String] :query_parameters_search_term Divisions containing search term within title or number
    # @option opts [Boolean] :query_parameters_include_when_member_was_teller Divisions where member was a teller as well as if they actually voted
    # @option opts [Time] :query_parameters_start_date Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
    # @option opts [Time] :query_parameters_end_date Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
    # @option opts [Integer] :query_parameters_division_number Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
    # @return [Array<MemberVotingRecord>]
    def divisions_get_voting_records_for_member(format, query_parameters_member_id, opts = {})
      data, _status_code, _headers = divisions_get_voting_records_for_member_with_http_info(format, query_parameters_member_id, opts)
      data
    end

    # Return voting records for a Member
    # List of voting records for a member which meet the specified criteria.
    # @param format [String] xml or json
    # @param query_parameters_member_id [Integer] Id number of a Member whose voting records are to be returned
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :query_parameters_skip The number of records to skip. Default is 0
    # @option opts [Integer] :query_parameters_take The number of records to return per page. Default is 25
    # @option opts [String] :query_parameters_search_term Divisions containing search term within title or number
    # @option opts [Boolean] :query_parameters_include_when_member_was_teller Divisions where member was a teller as well as if they actually voted
    # @option opts [Time] :query_parameters_start_date Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
    # @option opts [Time] :query_parameters_end_date Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
    # @option opts [Integer] :query_parameters_division_number Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
    # @return [Array<(Array<MemberVotingRecord>, Integer, Hash)>] Array<MemberVotingRecord> data, response status code and response headers
    def divisions_get_voting_records_for_member_with_http_info(format, query_parameters_member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DivisionsApi.divisions_get_voting_records_for_member ...'
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling DivisionsApi.divisions_get_voting_records_for_member"
      end
      # verify the required parameter 'query_parameters_member_id' is set
      if @api_client.config.client_side_validation && query_parameters_member_id.nil?
        fail ArgumentError, "Missing the required parameter 'query_parameters_member_id' when calling DivisionsApi.divisions_get_voting_records_for_member"
      end
      if @api_client.config.client_side_validation && query_parameters_member_id > 2147483647
        fail ArgumentError, 'invalid value for "query_parameters_member_id" when calling DivisionsApi.divisions_get_voting_records_for_member, must be smaller than or equal to 2147483647.'
      end

      if @api_client.config.client_side_validation && query_parameters_member_id < 1
        fail ArgumentError, 'invalid value for "query_parameters_member_id" when calling DivisionsApi.divisions_get_voting_records_for_member, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/data/divisions.{format}/membervoting'.sub('{' + 'format' + '}', CGI.escape(format.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'queryParameters.memberId'] = query_parameters_member_id
      query_params[:'queryParameters.skip'] = opts[:'query_parameters_skip'] if !opts[:'query_parameters_skip'].nil?
      query_params[:'queryParameters.take'] = opts[:'query_parameters_take'] if !opts[:'query_parameters_take'].nil?
      query_params[:'queryParameters.searchTerm'] = opts[:'query_parameters_search_term'] if !opts[:'query_parameters_search_term'].nil?
      query_params[:'queryParameters.includeWhenMemberWasTeller'] = opts[:'query_parameters_include_when_member_was_teller'] if !opts[:'query_parameters_include_when_member_was_teller'].nil?
      query_params[:'queryParameters.startDate'] = opts[:'query_parameters_start_date'] if !opts[:'query_parameters_start_date'].nil?
      query_params[:'queryParameters.endDate'] = opts[:'query_parameters_end_date'] if !opts[:'query_parameters_end_date'].nil?
      query_params[:'queryParameters.divisionNumber'] = opts[:'query_parameters_division_number'] if !opts[:'query_parameters_division_number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MemberVotingRecord>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DivisionsApi.divisions_get_voting_records_for_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DivisionsApi#divisions_get_voting_records_for_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a list of Divisions
    # List of Divisions which meet the specified criteria
    # @param format [String] json or xml
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :query_parameters_skip The number of records to skip. Default is 0
    # @option opts [Integer] :query_parameters_take The number of records to return per page. Default is 25
    # @option opts [String] :query_parameters_search_term Divisions containing search term within title or number
    # @option opts [Integer] :query_parameters_member_id Divisions returning Member with Member ID voting records
    # @option opts [Boolean] :query_parameters_include_when_member_was_teller Divisions where member was a teller as well as if they actually voted
    # @option opts [Time] :query_parameters_start_date Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
    # @option opts [Time] :query_parameters_end_date Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
    # @option opts [Integer] :query_parameters_division_number Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
    # @return [Array<PublishedDivision>]
    def divisions_search_divisions(format, opts = {})
      data, _status_code, _headers = divisions_search_divisions_with_http_info(format, opts)
      data
    end

    # Return a list of Divisions
    # List of Divisions which meet the specified criteria
    # @param format [String] json or xml
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :query_parameters_skip The number of records to skip. Default is 0
    # @option opts [Integer] :query_parameters_take The number of records to return per page. Default is 25
    # @option opts [String] :query_parameters_search_term Divisions containing search term within title or number
    # @option opts [Integer] :query_parameters_member_id Divisions returning Member with Member ID voting records
    # @option opts [Boolean] :query_parameters_include_when_member_was_teller Divisions where member was a teller as well as if they actually voted
    # @option opts [Time] :query_parameters_start_date Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
    # @option opts [Time] :query_parameters_end_date Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
    # @option opts [Integer] :query_parameters_division_number Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
    # @return [Array<(Array<PublishedDivision>, Integer, Hash)>] Array<PublishedDivision> data, response status code and response headers
    def divisions_search_divisions_with_http_info(format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DivisionsApi.divisions_search_divisions ...'
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling DivisionsApi.divisions_search_divisions"
      end
      # resource path
      local_var_path = '/data/divisions.{format}/search'.sub('{' + 'format' + '}', CGI.escape(format.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'queryParameters.skip'] = opts[:'query_parameters_skip'] if !opts[:'query_parameters_skip'].nil?
      query_params[:'queryParameters.take'] = opts[:'query_parameters_take'] if !opts[:'query_parameters_take'].nil?
      query_params[:'queryParameters.searchTerm'] = opts[:'query_parameters_search_term'] if !opts[:'query_parameters_search_term'].nil?
      query_params[:'queryParameters.memberId'] = opts[:'query_parameters_member_id'] if !opts[:'query_parameters_member_id'].nil?
      query_params[:'queryParameters.includeWhenMemberWasTeller'] = opts[:'query_parameters_include_when_member_was_teller'] if !opts[:'query_parameters_include_when_member_was_teller'].nil?
      query_params[:'queryParameters.startDate'] = opts[:'query_parameters_start_date'] if !opts[:'query_parameters_start_date'].nil?
      query_params[:'queryParameters.endDate'] = opts[:'query_parameters_end_date'] if !opts[:'query_parameters_end_date'].nil?
      query_params[:'queryParameters.divisionNumber'] = opts[:'query_parameters_division_number'] if !opts[:'query_parameters_division_number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PublishedDivision>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DivisionsApi.divisions_search_divisions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DivisionsApi#divisions_search_divisions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return total results count
    # Total count of Divisions meeting the specified criteria
    # @param format [String] json or xml
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query_parameters_search_term Divisions containing search term within title or number
    # @option opts [Integer] :query_parameters_member_id Divisions returning Member with Member ID voting records
    # @option opts [Boolean] :query_parameters_include_when_member_was_teller Divisions where member was a teller as well as if they actually voted
    # @option opts [Time] :query_parameters_start_date Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
    # @option opts [Time] :query_parameters_end_date Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
    # @option opts [Integer] :query_parameters_division_number Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
    # @return [Integer]
    def divisions_search_total_results(format, opts = {})
      data, _status_code, _headers = divisions_search_total_results_with_http_info(format, opts)
      data
    end

    # Return total results count
    # Total count of Divisions meeting the specified criteria
    # @param format [String] json or xml
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query_parameters_search_term Divisions containing search term within title or number
    # @option opts [Integer] :query_parameters_member_id Divisions returning Member with Member ID voting records
    # @option opts [Boolean] :query_parameters_include_when_member_was_teller Divisions where member was a teller as well as if they actually voted
    # @option opts [Time] :query_parameters_start_date Divisions where division date in one or after date provided. Date format is yyyy-MM-dd
    # @option opts [Time] :query_parameters_end_date Divisions where division date in one or before date provided. Date format is yyyy-MM-dd
    # @option opts [Integer] :query_parameters_division_number Division Number - as specified by the House, unique within a session. This is different to the division id which uniquely identifies a division in this system and is passed to the GET division endpoint
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def divisions_search_total_results_with_http_info(format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DivisionsApi.divisions_search_total_results ...'
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling DivisionsApi.divisions_search_total_results"
      end
      # resource path
      local_var_path = '/data/divisions.{format}/searchTotalResults'.sub('{' + 'format' + '}', CGI.escape(format.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'queryParameters.searchTerm'] = opts[:'query_parameters_search_term'] if !opts[:'query_parameters_search_term'].nil?
      query_params[:'queryParameters.memberId'] = opts[:'query_parameters_member_id'] if !opts[:'query_parameters_member_id'].nil?
      query_params[:'queryParameters.includeWhenMemberWasTeller'] = opts[:'query_parameters_include_when_member_was_teller'] if !opts[:'query_parameters_include_when_member_was_teller'].nil?
      query_params[:'queryParameters.startDate'] = opts[:'query_parameters_start_date'] if !opts[:'query_parameters_start_date'].nil?
      query_params[:'queryParameters.endDate'] = opts[:'query_parameters_end_date'] if !opts[:'query_parameters_end_date'].nil?
      query_params[:'queryParameters.divisionNumber'] = opts[:'query_parameters_division_number'] if !opts[:'query_parameters_division_number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Integer'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DivisionsApi.divisions_search_total_results",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DivisionsApi#divisions_search_total_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
