=begin
#Commons Votes API

#An API that allows querying of Commons Votes data.

The version of the OpenAPI document: v1
Contact: softwareengineering@parliament.uk
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module ParliamentCommonsVotes
  class PublishedDivision
    attr_accessor :division_id

    attr_accessor :date

    attr_accessor :publication_updated

    attr_accessor :number

    attr_accessor :is_deferred

    attr_accessor :evel_type

    attr_accessor :evel_country

    attr_accessor :title

    attr_accessor :aye_count

    attr_accessor :no_count

    attr_accessor :double_majority_aye_count

    attr_accessor :double_majority_no_count

    attr_accessor :aye_tellers

    attr_accessor :no_tellers

    attr_accessor :ayes

    attr_accessor :noes

    attr_accessor :friendly_description

    attr_accessor :friendly_title

    attr_accessor :no_vote_recorded

    attr_accessor :remote_voting_start

    attr_accessor :remote_voting_end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'division_id' => :'DivisionId',
        :'date' => :'Date',
        :'publication_updated' => :'PublicationUpdated',
        :'number' => :'Number',
        :'is_deferred' => :'IsDeferred',
        :'evel_type' => :'EVELType',
        :'evel_country' => :'EVELCountry',
        :'title' => :'Title',
        :'aye_count' => :'AyeCount',
        :'no_count' => :'NoCount',
        :'double_majority_aye_count' => :'DoubleMajorityAyeCount',
        :'double_majority_no_count' => :'DoubleMajorityNoCount',
        :'aye_tellers' => :'AyeTellers',
        :'no_tellers' => :'NoTellers',
        :'ayes' => :'Ayes',
        :'noes' => :'Noes',
        :'friendly_description' => :'FriendlyDescription',
        :'friendly_title' => :'FriendlyTitle',
        :'no_vote_recorded' => :'NoVoteRecorded',
        :'remote_voting_start' => :'RemoteVotingStart',
        :'remote_voting_end' => :'RemoteVotingEnd'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'division_id' => :'Integer',
        :'date' => :'Time',
        :'publication_updated' => :'Time',
        :'number' => :'Integer',
        :'is_deferred' => :'Boolean',
        :'evel_type' => :'String',
        :'evel_country' => :'String',
        :'title' => :'String',
        :'aye_count' => :'Integer',
        :'no_count' => :'Integer',
        :'double_majority_aye_count' => :'Integer',
        :'double_majority_no_count' => :'Integer',
        :'aye_tellers' => :'Array<RecordedMember>',
        :'no_tellers' => :'Array<RecordedMember>',
        :'ayes' => :'Array<RecordedMember>',
        :'noes' => :'Array<RecordedMember>',
        :'friendly_description' => :'String',
        :'friendly_title' => :'String',
        :'no_vote_recorded' => :'Array<RecordedMember>',
        :'remote_voting_start' => :'Time',
        :'remote_voting_end' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ParliamentCommonsVotes::PublishedDivision` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ParliamentCommonsVotes::PublishedDivision`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'publication_updated')
        self.publication_updated = attributes[:'publication_updated']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'is_deferred')
        self.is_deferred = attributes[:'is_deferred']
      end

      if attributes.key?(:'evel_type')
        self.evel_type = attributes[:'evel_type']
      end

      if attributes.key?(:'evel_country')
        self.evel_country = attributes[:'evel_country']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'aye_count')
        self.aye_count = attributes[:'aye_count']
      end

      if attributes.key?(:'no_count')
        self.no_count = attributes[:'no_count']
      end

      if attributes.key?(:'double_majority_aye_count')
        self.double_majority_aye_count = attributes[:'double_majority_aye_count']
      end

      if attributes.key?(:'double_majority_no_count')
        self.double_majority_no_count = attributes[:'double_majority_no_count']
      end

      if attributes.key?(:'aye_tellers')
        if (value = attributes[:'aye_tellers']).is_a?(Array)
          self.aye_tellers = value
        end
      end

      if attributes.key?(:'no_tellers')
        if (value = attributes[:'no_tellers']).is_a?(Array)
          self.no_tellers = value
        end
      end

      if attributes.key?(:'ayes')
        if (value = attributes[:'ayes']).is_a?(Array)
          self.ayes = value
        end
      end

      if attributes.key?(:'noes')
        if (value = attributes[:'noes']).is_a?(Array)
          self.noes = value
        end
      end

      if attributes.key?(:'friendly_description')
        self.friendly_description = attributes[:'friendly_description']
      end

      if attributes.key?(:'friendly_title')
        self.friendly_title = attributes[:'friendly_title']
      end

      if attributes.key?(:'no_vote_recorded')
        if (value = attributes[:'no_vote_recorded']).is_a?(Array)
          self.no_vote_recorded = value
        end
      end

      if attributes.key?(:'remote_voting_start')
        self.remote_voting_start = attributes[:'remote_voting_start']
      end

      if attributes.key?(:'remote_voting_end')
        self.remote_voting_end = attributes[:'remote_voting_end']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          division_id == o.division_id &&
          date == o.date &&
          publication_updated == o.publication_updated &&
          number == o.number &&
          is_deferred == o.is_deferred &&
          evel_type == o.evel_type &&
          evel_country == o.evel_country &&
          title == o.title &&
          aye_count == o.aye_count &&
          no_count == o.no_count &&
          double_majority_aye_count == o.double_majority_aye_count &&
          double_majority_no_count == o.double_majority_no_count &&
          aye_tellers == o.aye_tellers &&
          no_tellers == o.no_tellers &&
          ayes == o.ayes &&
          noes == o.noes &&
          friendly_description == o.friendly_description &&
          friendly_title == o.friendly_title &&
          no_vote_recorded == o.no_vote_recorded &&
          remote_voting_start == o.remote_voting_start &&
          remote_voting_end == o.remote_voting_end
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [division_id, date, publication_updated, number, is_deferred, evel_type, evel_country, title, aye_count, no_count, double_majority_aye_count, double_majority_no_count, aye_tellers, no_tellers, ayes, noes, friendly_description, friendly_title, no_vote_recorded, remote_voting_start, remote_voting_end].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ParliamentCommonsVotes.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
