=begin
#Members API

#An API which retrieves Members data.

The version of the OpenAPI document: v1
Contact: softwareengineering@parliament.uk
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module ParliamentMembers
  class LordsInterestsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a list of registered interests
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search_term Registered interests containing search term
    # @option opts [Integer] :page Page of results to return, default 0. Results per page 20.
    # @option opts [Boolean] :include_deleted Registered interests that have been deleted (default to false)
    # @return [MembersInterestsMembersServiceSearchResult]
    def api_lords_interests_register_get(opts = {})
      data, _status_code, _headers = api_lords_interests_register_get_with_http_info(opts)
      data
    end

    # Returns a list of registered interests
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search_term Registered interests containing search term
    # @option opts [Integer] :page Page of results to return, default 0. Results per page 20.
    # @option opts [Boolean] :include_deleted Registered interests that have been deleted (default to false)
    # @return [Array<(MembersInterestsMembersServiceSearchResult, Integer, Hash)>] MembersInterestsMembersServiceSearchResult data, response status code and response headers
    def api_lords_interests_register_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LordsInterestsApi.api_lords_interests_register_get ...'
      end
      # resource path
      local_var_path = '/api/LordsInterests/Register'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'searchTerm'] = opts[:'search_term'] if !opts[:'search_term'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MembersInterestsMembersServiceSearchResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"LordsInterestsApi.api_lords_interests_register_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LordsInterestsApi#api_lords_interests_register_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of staff
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search_term Staff containing search term
    # @option opts [Integer] :page Page of results to return, default 0. Results per page 20.
    # @return [MembersStaffMembersServiceSearchResult]
    def api_lords_interests_staff_get(opts = {})
      data, _status_code, _headers = api_lords_interests_staff_get_with_http_info(opts)
      data
    end

    # Returns a list of staff
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search_term Staff containing search term
    # @option opts [Integer] :page Page of results to return, default 0. Results per page 20.
    # @return [Array<(MembersStaffMembersServiceSearchResult, Integer, Hash)>] MembersStaffMembersServiceSearchResult data, response status code and response headers
    def api_lords_interests_staff_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LordsInterestsApi.api_lords_interests_staff_get ...'
      end
      # resource path
      local_var_path = '/api/LordsInterests/Staff'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'searchTerm'] = opts[:'search_term'] if !opts[:'search_term'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MembersStaffMembersServiceSearchResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"LordsInterestsApi.api_lords_interests_staff_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LordsInterestsApi#api_lords_interests_staff_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
