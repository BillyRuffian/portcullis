=begin
#Members API

#An API which retrieves Members data.

The version of the OpenAPI document: v1
Contact: softwareengineering@parliament.uk
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module ParliamentMembers
  class MembersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Return members by ID with list of their historical names, parties and memberships
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids List of MemberIds to find
    # @return [Array<MemberHistoryItem>]
    def api_members_history_get(opts = {})
      data, _status_code, _headers = api_members_history_get_with_http_info(opts)
      data
    end

    # Return members by ID with list of their historical names, parties and memberships
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids List of MemberIds to find
    # @return [Array<(Array<MemberHistoryItem>, Integer, Hash)>] Array<MemberHistoryItem> data, response status code and response headers
    def api_members_history_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_history_get ...'
      end
      # resource path
      local_var_path = '/api/Members/History'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MemberHistoryItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return biography of member by ID
    # @param id [Integer] Biography of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [MemberBiographyItem]
    def api_members_id_biography_get(id, opts = {})
      data, _status_code, _headers = api_members_id_biography_get_with_http_info(id, opts)
      data
    end

    # Return biography of member by ID
    # @param id [Integer] Biography of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberBiographyItem, Integer, Hash)>] MemberBiographyItem data, response status code and response headers
    def api_members_id_biography_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_biography_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_biography_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/Biography'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberBiographyItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_biography_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_biography_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return list of contact details of member by ID
    # @param id [Integer] Contact details of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [ContactInformationListItem]
    def api_members_id_contact_get(id, opts = {})
      data, _status_code, _headers = api_members_id_contact_get_with_http_info(id, opts)
      data
    end

    # Return list of contact details of member by ID
    # @param id [Integer] Contact details of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContactInformationListItem, Integer, Hash)>] ContactInformationListItem data, response status code and response headers
    def api_members_id_contact_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_contact_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_contact_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/Contact'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContactInformationListItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_contact_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_contact_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return contribution summary of member by ID
    # @param id [Integer] Contribution summary of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [DebateContributionMembersServiceSearchResult]
    def api_members_id_contribution_summary_get(id, opts = {})
      data, _status_code, _headers = api_members_id_contribution_summary_get_with_http_info(id, opts)
      data
    end

    # Return contribution summary of member by ID
    # @param id [Integer] Contribution summary of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [Array<(DebateContributionMembersServiceSearchResult, Integer, Hash)>] DebateContributionMembersServiceSearchResult data, response status code and response headers
    def api_members_id_contribution_summary_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_contribution_summary_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_contribution_summary_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/ContributionSummary'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DebateContributionMembersServiceSearchResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_contribution_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_contribution_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return list of early day motions of member by ID
    # @param id [Integer] Early day motions of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [EarlyDayMotionMembersServiceSearchResult]
    def api_members_id_edms_get(id, opts = {})
      data, _status_code, _headers = api_members_id_edms_get_with_http_info(id, opts)
      data
    end

    # Return list of early day motions of member by ID
    # @param id [Integer] Early day motions of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [Array<(EarlyDayMotionMembersServiceSearchResult, Integer, Hash)>] EarlyDayMotionMembersServiceSearchResult data, response status code and response headers
    def api_members_id_edms_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_edms_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_edms_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/Edms'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EarlyDayMotionMembersServiceSearchResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_edms_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_edms_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return experience of member by ID
    # @param id [Integer] Experience of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [BiographyExperienceListItem]
    def api_members_id_experience_get(id, opts = {})
      data, _status_code, _headers = api_members_id_experience_get_with_http_info(id, opts)
      data
    end

    # Return experience of member by ID
    # @param id [Integer] Experience of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [Array<(BiographyExperienceListItem, Integer, Hash)>] BiographyExperienceListItem data, response status code and response headers
    def api_members_id_experience_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_experience_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_experience_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/Experience'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BiographyExperienceListItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_experience_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_experience_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return list of areas of focus of member by ID
    # @param id [Integer] Areas of focus of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [MemberFocusListItem]
    def api_members_id_focus_get(id, opts = {})
      data, _status_code, _headers = api_members_id_focus_get_with_http_info(id, opts)
      data
    end

    # Return list of areas of focus of member by ID
    # @param id [Integer] Areas of focus of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberFocusListItem, Integer, Hash)>] MemberFocusListItem data, response status code and response headers
    def api_members_id_focus_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_focus_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_focus_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/Focus'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberFocusListItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_focus_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_focus_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return member by ID
    # @param id [Integer] Member by ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :details_for_date Member object will be populated with details from the date specified
    # @return [MemberItem]
    def api_members_id_get(id, opts = {})
      data, _status_code, _headers = api_members_id_get_with_http_info(id, opts)
      data
    end

    # Return member by ID
    # @param id [Integer] Member by ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :details_for_date Member object will be populated with details from the date specified
    # @return [Array<(MemberItem, Integer, Hash)>] MemberItem data, response status code and response headers
    def api_members_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'detailsForDate'] = opts[:'details_for_date'] if !opts[:'details_for_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return latest election result of member by ID
    # @param id [Integer] Latest election result of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [ElectionResultItem]
    def api_members_id_latest_election_result_get(id, opts = {})
      data, _status_code, _headers = api_members_id_latest_election_result_get_with_http_info(id, opts)
      data
    end

    # Return latest election result of member by ID
    # @param id [Integer] Latest election result of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [Array<(ElectionResultItem, Integer, Hash)>] ElectionResultItem data, response status code and response headers
    def api_members_id_latest_election_result_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_latest_election_result_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_latest_election_result_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/LatestElectionResult'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ElectionResultItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_latest_election_result_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_latest_election_result_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return portrait of member by ID
    # @param id [Integer] Portrait of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [PortraitCropEnum] :crop_type 
    # @option opts [Boolean] :web_version  (default to true)
    # @return [nil]
    def api_members_id_portrait_get(id, opts = {})
      api_members_id_portrait_get_with_http_info(id, opts)
      nil
    end

    # Return portrait of member by ID
    # @param id [Integer] Portrait of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [PortraitCropEnum] :crop_type 
    # @option opts [Boolean] :web_version  (default to true)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_members_id_portrait_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_portrait_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_portrait_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/Portrait'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cropType'] = opts[:'crop_type'] if !opts[:'crop_type'].nil?
      query_params[:'webVersion'] = opts[:'web_version'] if !opts[:'web_version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_portrait_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_portrait_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return portrait url of member by ID
    # @param id [Integer] Portrait url of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [StringItem]
    def api_members_id_portrait_url_get(id, opts = {})
      data, _status_code, _headers = api_members_id_portrait_url_get_with_http_info(id, opts)
      data
    end

    # Return portrait url of member by ID
    # @param id [Integer] Portrait url of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringItem, Integer, Hash)>] StringItem data, response status code and response headers
    def api_members_id_portrait_url_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_portrait_url_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_portrait_url_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/PortraitUrl'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_portrait_url_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_portrait_url_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return list of registered interests of member by ID
    # @param id [Integer] Registered interests of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [House] :house Registered interests of Member by House specified
    # @return [RegisteredInterestCategoryListItem]
    def api_members_id_registered_interests_get(id, opts = {})
      data, _status_code, _headers = api_members_id_registered_interests_get_with_http_info(id, opts)
      data
    end

    # Return list of registered interests of member by ID
    # @param id [Integer] Registered interests of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [House] :house Registered interests of Member by House specified
    # @return [Array<(RegisteredInterestCategoryListItem, Integer, Hash)>] RegisteredInterestCategoryListItem data, response status code and response headers
    def api_members_id_registered_interests_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_registered_interests_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_registered_interests_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/RegisteredInterests'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'house'] = opts[:'house'] if !opts[:'house'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegisteredInterestCategoryListItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_registered_interests_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_registered_interests_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return list of staff of member by ID
    # @param id [Integer] Staff of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [StaffListItem]
    def api_members_id_staff_get(id, opts = {})
      data, _status_code, _headers = api_members_id_staff_get_with_http_info(id, opts)
      data
    end

    # Return list of staff of member by ID
    # @param id [Integer] Staff of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaffListItem, Integer, Hash)>] StaffListItem data, response status code and response headers
    def api_members_id_staff_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_staff_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_staff_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/Staff'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StaffListItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_staff_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_staff_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return synopsis of member by ID
    # @param id [Integer] Synopsis of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [StringItem]
    def api_members_id_synopsis_get(id, opts = {})
      data, _status_code, _headers = api_members_id_synopsis_get_with_http_info(id, opts)
      data
    end

    # Return synopsis of member by ID
    # @param id [Integer] Synopsis of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringItem, Integer, Hash)>] StringItem data, response status code and response headers
    def api_members_id_synopsis_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_synopsis_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_synopsis_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/Synopsis'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_synopsis_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_synopsis_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return thumbnail of member by ID
    # @param id [Integer] Thumbnail of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_members_id_thumbnail_get(id, opts = {})
      api_members_id_thumbnail_get_with_http_info(id, opts)
      nil
    end

    # Return thumbnail of member by ID
    # @param id [Integer] Thumbnail of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_members_id_thumbnail_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_thumbnail_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_thumbnail_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/Thumbnail'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_thumbnail_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_thumbnail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return thumbnail url of member by ID
    # @param id [Integer] Thumbnail url of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [StringItem]
    def api_members_id_thumbnail_url_get(id, opts = {})
      data, _status_code, _headers = api_members_id_thumbnail_url_get_with_http_info(id, opts)
      data
    end

    # Return thumbnail url of member by ID
    # @param id [Integer] Thumbnail url of Member by ID specified
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringItem, Integer, Hash)>] StringItem data, response status code and response headers
    def api_members_id_thumbnail_url_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_thumbnail_url_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_thumbnail_url_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/ThumbnailUrl'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_thumbnail_url_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_thumbnail_url_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return list of votes by member by ID
    # @param id [Integer] Votes by Member by ID specified
    # @param house [House] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [VoteMembersServiceSearchResult]
    def api_members_id_voting_get(id, house, opts = {})
      data, _status_code, _headers = api_members_id_voting_get_with_http_info(id, house, opts)
      data
    end

    # Return list of votes by member by ID
    # @param id [Integer] Votes by Member by ID specified
    # @param house [House] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [Array<(VoteMembersServiceSearchResult, Integer, Hash)>] VoteMembersServiceSearchResult data, response status code and response headers
    def api_members_id_voting_get_with_http_info(id, house, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_voting_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_voting_get"
      end
      # verify the required parameter 'house' is set
      if @api_client.config.client_side_validation && house.nil?
        fail ArgumentError, "Missing the required parameter 'house' when calling MembersApi.api_members_id_voting_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/Voting'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'house'] = house
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VoteMembersServiceSearchResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_voting_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_voting_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return list of written questions by member by ID
    # @param id [Integer] Written questions by Member by ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [WrittenQuestionMembersServiceSearchResult]
    def api_members_id_written_questions_get(id, opts = {})
      data, _status_code, _headers = api_members_id_written_questions_get_with_http_info(id, opts)
      data
    end

    # Return list of written questions by member by ID
    # @param id [Integer] Written questions by Member by ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @return [Array<(WrittenQuestionMembersServiceSearchResult, Integer, Hash)>] WrittenQuestionMembersServiceSearchResult data, response status code and response headers
    def api_members_id_written_questions_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_id_written_questions_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.api_members_id_written_questions_get"
      end
      # resource path
      local_var_path = '/api/Members/{id}/WrittenQuestions'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WrittenQuestionMembersServiceSearchResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_id_written_questions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_id_written_questions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of current members of the Commons or Lords
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Members where name contains term specified
    # @option opts [String] :location Members where postcode or geographical location matches the term specified
    # @option opts [String] :post_title Members which have held the post specified
    # @option opts [Integer] :party_id Members which are currently affiliated with party with party ID
    # @option opts [House] :house Members where their most recent house is the house specified
    # @option opts [Integer] :constituency_id Members which currently hold the constituency with constituency id
    # @option opts [String] :name_starts_with Members with surname begining with letter(s) specified
    # @option opts [String] :gender Members with the gender specified
    # @option opts [Time] :membership_started_since Members who started on or after the date given
    # @option opts [Time] :membership_ended_membership_ended_since Members who left the House on or after the date given
    # @option opts [Array<Integer>] :membership_ended_membership_end_reason_ids 
    # @option opts [Time] :membership_in_date_range_was_member_on_or_after Members who were active on or after the date specified
    # @option opts [Time] :membership_in_date_range_was_member_on_or_before Members who were active on or before the date specified
    # @option opts [House] :membership_in_date_range_was_member_of_house Members who were active in the house specifid
    # @option opts [Boolean] :is_eligible Members currently Eligible to sit in their House
    # @option opts [Boolean] :is_current_member Members who are current or former members
    # @option opts [Integer] :policy_interest_id Members with specified policy interest
    # @option opts [String] :experience Members with specified experience
    # @option opts [Integer] :skip The number of records to skip from the first, default is 0 (default to 0)
    # @option opts [Integer] :take The number of records to return, default is 20. Maximum is 20 (default to 20)
    # @return [MemberMembersServiceSearchResult]
    def api_members_search_get(opts = {})
      data, _status_code, _headers = api_members_search_get_with_http_info(opts)
      data
    end

    # Returns a list of current members of the Commons or Lords
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Members where name contains term specified
    # @option opts [String] :location Members where postcode or geographical location matches the term specified
    # @option opts [String] :post_title Members which have held the post specified
    # @option opts [Integer] :party_id Members which are currently affiliated with party with party ID
    # @option opts [House] :house Members where their most recent house is the house specified
    # @option opts [Integer] :constituency_id Members which currently hold the constituency with constituency id
    # @option opts [String] :name_starts_with Members with surname begining with letter(s) specified
    # @option opts [String] :gender Members with the gender specified
    # @option opts [Time] :membership_started_since Members who started on or after the date given
    # @option opts [Time] :membership_ended_membership_ended_since Members who left the House on or after the date given
    # @option opts [Array<Integer>] :membership_ended_membership_end_reason_ids 
    # @option opts [Time] :membership_in_date_range_was_member_on_or_after Members who were active on or after the date specified
    # @option opts [Time] :membership_in_date_range_was_member_on_or_before Members who were active on or before the date specified
    # @option opts [House] :membership_in_date_range_was_member_of_house Members who were active in the house specifid
    # @option opts [Boolean] :is_eligible Members currently Eligible to sit in their House
    # @option opts [Boolean] :is_current_member Members who are current or former members
    # @option opts [Integer] :policy_interest_id Members with specified policy interest
    # @option opts [String] :experience Members with specified experience
    # @option opts [Integer] :skip The number of records to skip from the first, default is 0 (default to 0)
    # @option opts [Integer] :take The number of records to return, default is 20. Maximum is 20 (default to 20)
    # @return [Array<(MemberMembersServiceSearchResult, Integer, Hash)>] MemberMembersServiceSearchResult data, response status code and response headers
    def api_members_search_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_search_get ...'
      end
      # resource path
      local_var_path = '/api/Members/Search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'Name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'Location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'PostTitle'] = opts[:'post_title'] if !opts[:'post_title'].nil?
      query_params[:'PartyId'] = opts[:'party_id'] if !opts[:'party_id'].nil?
      query_params[:'House'] = opts[:'house'] if !opts[:'house'].nil?
      query_params[:'ConstituencyId'] = opts[:'constituency_id'] if !opts[:'constituency_id'].nil?
      query_params[:'NameStartsWith'] = opts[:'name_starts_with'] if !opts[:'name_starts_with'].nil?
      query_params[:'Gender'] = opts[:'gender'] if !opts[:'gender'].nil?
      query_params[:'MembershipStartedSince'] = opts[:'membership_started_since'] if !opts[:'membership_started_since'].nil?
      query_params[:'MembershipEnded.MembershipEndedSince'] = opts[:'membership_ended_membership_ended_since'] if !opts[:'membership_ended_membership_ended_since'].nil?
      query_params[:'MembershipEnded.MembershipEndReasonIds'] = @api_client.build_collection_param(opts[:'membership_ended_membership_end_reason_ids'], :multi) if !opts[:'membership_ended_membership_end_reason_ids'].nil?
      query_params[:'MembershipInDateRange.WasMemberOnOrAfter'] = opts[:'membership_in_date_range_was_member_on_or_after'] if !opts[:'membership_in_date_range_was_member_on_or_after'].nil?
      query_params[:'MembershipInDateRange.WasMemberOnOrBefore'] = opts[:'membership_in_date_range_was_member_on_or_before'] if !opts[:'membership_in_date_range_was_member_on_or_before'].nil?
      query_params[:'MembershipInDateRange.WasMemberOfHouse'] = opts[:'membership_in_date_range_was_member_of_house'] if !opts[:'membership_in_date_range_was_member_of_house'].nil?
      query_params[:'IsEligible'] = opts[:'is_eligible'] if !opts[:'is_eligible'].nil?
      query_params[:'IsCurrentMember'] = opts[:'is_current_member'] if !opts[:'is_current_member'].nil?
      query_params[:'PolicyInterestId'] = opts[:'policy_interest_id'] if !opts[:'policy_interest_id'].nil?
      query_params[:'Experience'] = opts[:'experience'] if !opts[:'experience'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberMembersServiceSearchResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_search_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_search_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of members of the Commons or Lords
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Members with names containing the term specified
    # @option opts [Time] :date_to_search_for Members that were an active member of the Commons or Lords on the date specified
    # @option opts [Integer] :skip The number of records to skip from the first, default is 0 (default to 0)
    # @option opts [Integer] :take The number of records to return, default is 20. Maximum is 20 (default to 20)
    # @return [MemberMembersServiceSearchResult]
    def api_members_search_historical_get(opts = {})
      data, _status_code, _headers = api_members_search_historical_get_with_http_info(opts)
      data
    end

    # Returns a list of members of the Commons or Lords
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Members with names containing the term specified
    # @option opts [Time] :date_to_search_for Members that were an active member of the Commons or Lords on the date specified
    # @option opts [Integer] :skip The number of records to skip from the first, default is 0 (default to 0)
    # @option opts [Integer] :take The number of records to return, default is 20. Maximum is 20 (default to 20)
    # @return [Array<(MemberMembersServiceSearchResult, Integer, Hash)>] MemberMembersServiceSearchResult data, response status code and response headers
    def api_members_search_historical_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.api_members_search_historical_get ...'
      end
      # resource path
      local_var_path = '/api/Members/SearchHistorical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'dateToSearchFor'] = opts[:'date_to_search_for'] if !opts[:'date_to_search_for'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberMembersServiceSearchResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.api_members_search_historical_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#api_members_search_historical_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
