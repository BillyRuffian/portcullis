=begin
#Members API

#An API which retrieves Members data.

The version of the OpenAPI document: v1
Contact: softwareengineering@parliament.uk
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module ParliamentMembers
  class WrittenQuestion
    attr_accessor :id

    attr_accessor :asking_member_id

    attr_accessor :house

    attr_accessor :member_has_interest

    attr_accessor :date_tabled

    attr_accessor :date_for_answer

    attr_accessor :uin

    attr_accessor :question_text

    attr_accessor :answering_body_id

    attr_accessor :is_withdrawn

    attr_accessor :is_named_day

    attr_accessor :grouped_questions

    attr_accessor :grouped_questions_dates

    attr_accessor :answer_is_holding

    attr_accessor :answer_is_correction

    attr_accessor :answering_member_id

    attr_accessor :correcting_member_id

    attr_accessor :date_answered

    attr_accessor :answer_text

    attr_accessor :attachment_count

    attr_accessor :heading

    attr_accessor :answering_member

    attr_accessor :correcting_member

    attr_accessor :answering_body

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'asking_member_id' => :'askingMemberId',
        :'house' => :'house',
        :'member_has_interest' => :'memberHasInterest',
        :'date_tabled' => :'dateTabled',
        :'date_for_answer' => :'dateForAnswer',
        :'uin' => :'uin',
        :'question_text' => :'questionText',
        :'answering_body_id' => :'answeringBodyId',
        :'is_withdrawn' => :'isWithdrawn',
        :'is_named_day' => :'isNamedDay',
        :'grouped_questions' => :'groupedQuestions',
        :'grouped_questions_dates' => :'groupedQuestionsDates',
        :'answer_is_holding' => :'answerIsHolding',
        :'answer_is_correction' => :'answerIsCorrection',
        :'answering_member_id' => :'answeringMemberId',
        :'correcting_member_id' => :'correctingMemberId',
        :'date_answered' => :'dateAnswered',
        :'answer_text' => :'answerText',
        :'attachment_count' => :'attachmentCount',
        :'heading' => :'heading',
        :'answering_member' => :'answeringMember',
        :'correcting_member' => :'correctingMember',
        :'answering_body' => :'answeringBody'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'asking_member_id' => :'Integer',
        :'house' => :'House',
        :'member_has_interest' => :'Boolean',
        :'date_tabled' => :'Time',
        :'date_for_answer' => :'Time',
        :'uin' => :'String',
        :'question_text' => :'String',
        :'answering_body_id' => :'Integer',
        :'is_withdrawn' => :'Boolean',
        :'is_named_day' => :'Boolean',
        :'grouped_questions' => :'Array<String>',
        :'grouped_questions_dates' => :'Array<GroupedQuestion>',
        :'answer_is_holding' => :'Boolean',
        :'answer_is_correction' => :'Boolean',
        :'answering_member_id' => :'Integer',
        :'correcting_member_id' => :'Integer',
        :'date_answered' => :'Time',
        :'answer_text' => :'String',
        :'attachment_count' => :'Integer',
        :'heading' => :'String',
        :'answering_member' => :'Member',
        :'correcting_member' => :'Member',
        :'answering_body' => :'AnsweringBody'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'uin',
        :'question_text',
        :'grouped_questions',
        :'grouped_questions_dates',
        :'answer_is_holding',
        :'answer_is_correction',
        :'answering_member_id',
        :'correcting_member_id',
        :'date_answered',
        :'answer_text',
        :'heading',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ParliamentMembers::WrittenQuestion` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ParliamentMembers::WrittenQuestion`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'asking_member_id')
        self.asking_member_id = attributes[:'asking_member_id']
      end

      if attributes.key?(:'house')
        self.house = attributes[:'house']
      end

      if attributes.key?(:'member_has_interest')
        self.member_has_interest = attributes[:'member_has_interest']
      end

      if attributes.key?(:'date_tabled')
        self.date_tabled = attributes[:'date_tabled']
      end

      if attributes.key?(:'date_for_answer')
        self.date_for_answer = attributes[:'date_for_answer']
      end

      if attributes.key?(:'uin')
        self.uin = attributes[:'uin']
      end

      if attributes.key?(:'question_text')
        self.question_text = attributes[:'question_text']
      end

      if attributes.key?(:'answering_body_id')
        self.answering_body_id = attributes[:'answering_body_id']
      end

      if attributes.key?(:'is_withdrawn')
        self.is_withdrawn = attributes[:'is_withdrawn']
      end

      if attributes.key?(:'is_named_day')
        self.is_named_day = attributes[:'is_named_day']
      end

      if attributes.key?(:'grouped_questions')
        if (value = attributes[:'grouped_questions']).is_a?(Array)
          self.grouped_questions = value
        end
      end

      if attributes.key?(:'grouped_questions_dates')
        if (value = attributes[:'grouped_questions_dates']).is_a?(Array)
          self.grouped_questions_dates = value
        end
      end

      if attributes.key?(:'answer_is_holding')
        self.answer_is_holding = attributes[:'answer_is_holding']
      end

      if attributes.key?(:'answer_is_correction')
        self.answer_is_correction = attributes[:'answer_is_correction']
      end

      if attributes.key?(:'answering_member_id')
        self.answering_member_id = attributes[:'answering_member_id']
      end

      if attributes.key?(:'correcting_member_id')
        self.correcting_member_id = attributes[:'correcting_member_id']
      end

      if attributes.key?(:'date_answered')
        self.date_answered = attributes[:'date_answered']
      end

      if attributes.key?(:'answer_text')
        self.answer_text = attributes[:'answer_text']
      end

      if attributes.key?(:'attachment_count')
        self.attachment_count = attributes[:'attachment_count']
      end

      if attributes.key?(:'heading')
        self.heading = attributes[:'heading']
      end

      if attributes.key?(:'answering_member')
        self.answering_member = attributes[:'answering_member']
      end

      if attributes.key?(:'correcting_member')
        self.correcting_member = attributes[:'correcting_member']
      end

      if attributes.key?(:'answering_body')
        self.answering_body = attributes[:'answering_body']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          asking_member_id == o.asking_member_id &&
          house == o.house &&
          member_has_interest == o.member_has_interest &&
          date_tabled == o.date_tabled &&
          date_for_answer == o.date_for_answer &&
          uin == o.uin &&
          question_text == o.question_text &&
          answering_body_id == o.answering_body_id &&
          is_withdrawn == o.is_withdrawn &&
          is_named_day == o.is_named_day &&
          grouped_questions == o.grouped_questions &&
          grouped_questions_dates == o.grouped_questions_dates &&
          answer_is_holding == o.answer_is_holding &&
          answer_is_correction == o.answer_is_correction &&
          answering_member_id == o.answering_member_id &&
          correcting_member_id == o.correcting_member_id &&
          date_answered == o.date_answered &&
          answer_text == o.answer_text &&
          attachment_count == o.attachment_count &&
          heading == o.heading &&
          answering_member == o.answering_member &&
          correcting_member == o.correcting_member &&
          answering_body == o.answering_body
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, asking_member_id, house, member_has_interest, date_tabled, date_for_answer, uin, question_text, answering_body_id, is_withdrawn, is_named_day, grouped_questions, grouped_questions_dates, answer_is_holding, answer_is_correction, answering_member_id, correcting_member_id, date_answered, answer_text, attachment_count, heading, answering_member, correcting_member, answering_body].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ParliamentMembers.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
