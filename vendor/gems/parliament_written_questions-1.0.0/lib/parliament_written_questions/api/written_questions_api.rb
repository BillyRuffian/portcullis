=begin
#Written Questions Service API

#Data around written questions and answers, as well as written ministerial statements.

The version of the OpenAPI document: v1
Contact: softwareengineering@parliament.uk
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module ParliamentWrittenQuestions
  class WrittenQuestionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a written question
    # @param date [Time] Written question on date specified
    # @param uin [String] Written question with uid specified
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :expand_member Expand the details of Members in the results
    # @return [QuestionsViewModelItem]
    def api_writtenquestions_questions_date_uin_get(date, uin, opts = {})
      data, _status_code, _headers = api_writtenquestions_questions_date_uin_get_with_http_info(date, uin, opts)
      data
    end

    # Returns a written question
    # @param date [Time] Written question on date specified
    # @param uin [String] Written question with uid specified
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :expand_member Expand the details of Members in the results
    # @return [Array<(QuestionsViewModelItem, Integer, Hash)>] QuestionsViewModelItem data, response status code and response headers
    def api_writtenquestions_questions_date_uin_get_with_http_info(date, uin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WrittenQuestionsApi.api_writtenquestions_questions_date_uin_get ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling WrittenQuestionsApi.api_writtenquestions_questions_date_uin_get"
      end
      # resource path
      local_var_path = '/api/writtenquestions/questions/{date}/{uin}'.sub('{' + 'date' + '}', CGI.escape(date.to_s)).sub('{' + 'uin' + '}', CGI.escape(uin.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'expandMember'] = opts[:'expand_member'] if !opts[:'expand_member'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuestionsViewModelItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WrittenQuestionsApi.api_writtenquestions_questions_date_uin_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WrittenQuestionsApi#api_writtenquestions_questions_date_uin_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of written questions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :asking_member_id Written questions asked by member with member ID specified
    # @option opts [Integer] :answering_member_id Written questions answered by member with member ID specified
    # @option opts [Time] :tabled_when_from Written questions tabled on or after the date specified. Date format yyyy-mm-dd
    # @option opts [Time] :tabled_when_to Written questions tabled on or before the date specified. Date format yyyy-mm-dd
    # @option opts [Answered] :answered Written questions that have been answered, unanswered or either.
    # @option opts [Time] :answered_when_from Written questions answered on or after the date specified. Date format yyyy-mm-dd
    # @option opts [Time] :answered_when_to Written questions answered on or before the date specified. Date format yyyy-mm-dd
    # @option opts [QuestionStatusEnum] :question_status Written questions with the status specified
    # @option opts [Boolean] :include_withdrawn Include written questions that have been withdrawn
    # @option opts [Boolean] :expand_member Expand the details of Members in the results
    # @option opts [Time] :corrected_when_from Written questions corrected on or after the date specified. Date format yyyy-mm-dd
    # @option opts [Time] :corrected_when_to Written questions corrected on or before the date specified. Date format yyyy-mm-dd
    # @option opts [String] :search_term Written questions / statements containing the search term specified, searches item content
    # @option opts [String] :u_in Written questions / statements with the uin specified
    # @option opts [Array<Integer>] :answering_bodies Written questions / statements relating to the answering bodies with the IDs specified
    # @option opts [Array<Integer>] :members Written questions / statements relating to the members with the IDs specified
    # @option opts [HouseEnum] :house Written questions / statements relating to the House specified
    # @option opts [Integer] :skip Number of records to skip, default is 0
    # @option opts [Integer] :take Number of records to take, default is 20
    # @return [QuestionsViewModelSearchResult]
    def api_writtenquestions_questions_get(opts = {})
      data, _status_code, _headers = api_writtenquestions_questions_get_with_http_info(opts)
      data
    end

    # Returns a list of written questions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :asking_member_id Written questions asked by member with member ID specified
    # @option opts [Integer] :answering_member_id Written questions answered by member with member ID specified
    # @option opts [Time] :tabled_when_from Written questions tabled on or after the date specified. Date format yyyy-mm-dd
    # @option opts [Time] :tabled_when_to Written questions tabled on or before the date specified. Date format yyyy-mm-dd
    # @option opts [Answered] :answered Written questions that have been answered, unanswered or either.
    # @option opts [Time] :answered_when_from Written questions answered on or after the date specified. Date format yyyy-mm-dd
    # @option opts [Time] :answered_when_to Written questions answered on or before the date specified. Date format yyyy-mm-dd
    # @option opts [QuestionStatusEnum] :question_status Written questions with the status specified
    # @option opts [Boolean] :include_withdrawn Include written questions that have been withdrawn
    # @option opts [Boolean] :expand_member Expand the details of Members in the results
    # @option opts [Time] :corrected_when_from Written questions corrected on or after the date specified. Date format yyyy-mm-dd
    # @option opts [Time] :corrected_when_to Written questions corrected on or before the date specified. Date format yyyy-mm-dd
    # @option opts [String] :search_term Written questions / statements containing the search term specified, searches item content
    # @option opts [String] :u_in Written questions / statements with the uin specified
    # @option opts [Array<Integer>] :answering_bodies Written questions / statements relating to the answering bodies with the IDs specified
    # @option opts [Array<Integer>] :members Written questions / statements relating to the members with the IDs specified
    # @option opts [HouseEnum] :house Written questions / statements relating to the House specified
    # @option opts [Integer] :skip Number of records to skip, default is 0
    # @option opts [Integer] :take Number of records to take, default is 20
    # @return [Array<(QuestionsViewModelSearchResult, Integer, Hash)>] QuestionsViewModelSearchResult data, response status code and response headers
    def api_writtenquestions_questions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WrittenQuestionsApi.api_writtenquestions_questions_get ...'
      end
      if @api_client.config.client_side_validation && !opts[:'asking_member_id'].nil? && opts[:'asking_member_id'] > 2147483647
        fail ArgumentError, 'invalid value for "opts[:"asking_member_id"]" when calling WrittenQuestionsApi.api_writtenquestions_questions_get, must be smaller than or equal to 2147483647.'
      end

      if @api_client.config.client_side_validation && !opts[:'asking_member_id'].nil? && opts[:'asking_member_id'] < 1
        fail ArgumentError, 'invalid value for "opts[:"asking_member_id"]" when calling WrittenQuestionsApi.api_writtenquestions_questions_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'answering_member_id'].nil? && opts[:'answering_member_id'] > 2147483647
        fail ArgumentError, 'invalid value for "opts[:"answering_member_id"]" when calling WrittenQuestionsApi.api_writtenquestions_questions_get, must be smaller than or equal to 2147483647.'
      end

      if @api_client.config.client_side_validation && !opts[:'answering_member_id'].nil? && opts[:'answering_member_id'] < 1
        fail ArgumentError, 'invalid value for "opts[:"answering_member_id"]" when calling WrittenQuestionsApi.api_writtenquestions_questions_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] > 2147483647
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling WrittenQuestionsApi.api_writtenquestions_questions_get, must be smaller than or equal to 2147483647.'
      end

      if @api_client.config.client_side_validation && !opts[:'skip'].nil? && opts[:'skip'] < 0
        fail ArgumentError, 'invalid value for "opts[:"skip"]" when calling WrittenQuestionsApi.api_writtenquestions_questions_get, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'take'].nil? && opts[:'take'] > 2147483647
        fail ArgumentError, 'invalid value for "opts[:"take"]" when calling WrittenQuestionsApi.api_writtenquestions_questions_get, must be smaller than or equal to 2147483647.'
      end

      if @api_client.config.client_side_validation && !opts[:'take'].nil? && opts[:'take'] < 0
        fail ArgumentError, 'invalid value for "opts[:"take"]" when calling WrittenQuestionsApi.api_writtenquestions_questions_get, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/api/writtenquestions/questions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'askingMemberId'] = opts[:'asking_member_id'] if !opts[:'asking_member_id'].nil?
      query_params[:'answeringMemberId'] = opts[:'answering_member_id'] if !opts[:'answering_member_id'].nil?
      query_params[:'tabledWhenFrom'] = opts[:'tabled_when_from'] if !opts[:'tabled_when_from'].nil?
      query_params[:'tabledWhenTo'] = opts[:'tabled_when_to'] if !opts[:'tabled_when_to'].nil?
      query_params[:'answered'] = opts[:'answered'] if !opts[:'answered'].nil?
      query_params[:'answeredWhenFrom'] = opts[:'answered_when_from'] if !opts[:'answered_when_from'].nil?
      query_params[:'answeredWhenTo'] = opts[:'answered_when_to'] if !opts[:'answered_when_to'].nil?
      query_params[:'questionStatus'] = opts[:'question_status'] if !opts[:'question_status'].nil?
      query_params[:'includeWithdrawn'] = opts[:'include_withdrawn'] if !opts[:'include_withdrawn'].nil?
      query_params[:'expandMember'] = opts[:'expand_member'] if !opts[:'expand_member'].nil?
      query_params[:'correctedWhenFrom'] = opts[:'corrected_when_from'] if !opts[:'corrected_when_from'].nil?
      query_params[:'correctedWhenTo'] = opts[:'corrected_when_to'] if !opts[:'corrected_when_to'].nil?
      query_params[:'searchTerm'] = opts[:'search_term'] if !opts[:'search_term'].nil?
      query_params[:'uIN'] = opts[:'u_in'] if !opts[:'u_in'].nil?
      query_params[:'answeringBodies'] = @api_client.build_collection_param(opts[:'answering_bodies'], :multi) if !opts[:'answering_bodies'].nil?
      query_params[:'members'] = @api_client.build_collection_param(opts[:'members'], :multi) if !opts[:'members'].nil?
      query_params[:'house'] = opts[:'house'] if !opts[:'house'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuestionsViewModelSearchResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WrittenQuestionsApi.api_writtenquestions_questions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WrittenQuestionsApi#api_writtenquestions_questions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a written question
    # @param id [Integer] written question with ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :expand_member Expand the details of Members in the result
    # @return [QuestionsViewModelItem]
    def api_writtenquestions_questions_id_get(id, opts = {})
      data, _status_code, _headers = api_writtenquestions_questions_id_get_with_http_info(id, opts)
      data
    end

    # Returns a written question
    # @param id [Integer] written question with ID specified
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :expand_member Expand the details of Members in the result
    # @return [Array<(QuestionsViewModelItem, Integer, Hash)>] QuestionsViewModelItem data, response status code and response headers
    def api_writtenquestions_questions_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WrittenQuestionsApi.api_writtenquestions_questions_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WrittenQuestionsApi.api_writtenquestions_questions_id_get"
      end
      # resource path
      local_var_path = '/api/writtenquestions/questions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'expandMember'] = opts[:'expand_member'] if !opts[:'expand_member'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuestionsViewModelItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WrittenQuestionsApi.api_writtenquestions_questions_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WrittenQuestionsApi#api_writtenquestions_questions_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
